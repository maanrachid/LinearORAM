#ifndef _Encryptor_h
#define _Encryptor_h

#include "ext.h"

#include "ippcp.h"
#include "ippcore.h"
#include "wolfssl/wolfcrypt/aes.h"






void encrypt_wolfssl(Block message[], int size,int op){
  Aes enc;
  int ret = 0;

    // initialize enc with AesSetKey, using direction AES_ENCRYPTION
  byte wkey[] =  "\x00\x01\x02\x03\x04\x05\x06\x07"
    "\x08\x09\x10\x11\x12\x13\x14\x15";


  byte iv [] =    "\x00\x00\x01\x02\x03\x04\x05\x06\x07"
    "\x08\x09\x10\x11\x12\x13\x14\x15";
  
 
  //  printf("key size %d iv size %d message size %d\n",sizeof(wkey),sizeof(iv),sizeof(message));
  
  //  byte msg[16]; // multiple of 16 bytes

  // fill msg with data
  
  
  if (op==1){
    Block cipher[size]; // Some multiple of 16 bytes
    if (ret = wc_AesSetKey(&enc, wkey, 16, iv, AES_ENCRYPTION) != 0) {
        // failed to set aes key
      //printf("Failed to set key\n");
    }
    if ((ret = wc_AesCbcEncrypt(&enc, (byte*)cipher, (byte*)message, size*sizeof(Block))) != 0 ) {
    // block align error
      //printf("Fail to encryt CBC\n");      
    }
    memcpy(message,cipher,size*sizeof(Block));
  }else {
    Block cipher[size]; // Some multiple of 16 bytes
    if (ret = wc_AesSetKey(&enc, wkey, 16, iv, AES_DECRYPTION) != 0) {
      // failed to set aes key
      //printf("Failed to set key\n");
    }
    
    if ((ret = wc_AesCbcDecrypt(&enc, (byte*)cipher, (byte*)message, size*sizeof(Block))) != 0 ) {
    // block align error
      //printf("Fail to deccryt CBC\n");      
    }

    memcpy(message,cipher,size*sizeof(Block));
  }


}

  



void encrypt_ipp(Block message[], int size,int op){
  // op=1 is encryption, op=2 is decryption

  Ipp8u key[] = "\x00\x01\x02\x03\x04\x05\x06\x07"
    "\x08\x09\x10\x11\x12\x13\x14\x15";
  // define and setup AES cipher
  int ctxSize;
  ippsAESGetSize(&ctxSize);
  IppsAESSpec* pCtx = (IppsAESSpec*)( new Ipp8u [ctxSize] );  
  ippsAESInit(key, sizeof(key)-1, pCtx, ctxSize);  



  
  Ipp8u pIV[] = "\xff\xee\xdd\xcc\xbb\xaa\x99\x88"
    "\x77\x66\x55\x44\x33\x22\x11\x00"; 
  
  Ipp8u* pSrc= (Ipp8u*)message;
  int msgsize = size*sizeof(Block);
  Ipp8u* pDst = (Ipp8u*) malloc(msgsize);
  

  
  if (op==1){
    if (ippsAESEncryptCBC(pSrc,pDst,msgsize,pCtx,pIV)!=ippStsNoErr){
      //printf("Error Encrypting client\n");
      //exit(0);
    }
  }else{
    if (ippsAESDecryptCBC(pSrc,pDst,msgsize,pCtx,pIV)!=ippStsNoErr){
      //printf("Error Decrypting client\n");
      //exit(0);
    }
  }
  
  
  memcpy(message,pDst,msgsize);

}

void init_Enc(){
  
}




void Encrypt(Block message[], int size,int op){

  if (ENCRYPT_LIB==2)
    encrypt_ipp(message,size,op);
  else if (ENCRYPT_LIB==3)
     encrypt_wolfssl(message,size,op);
  

}









#endif 
